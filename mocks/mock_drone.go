// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/drone/drone-go/drone (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	drone "github.com/drone/drone-go/drone"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AutoscalePause mocks base method
func (m *MockClient) AutoscalePause() error {
	ret := m.ctrl.Call(m, "AutoscalePause")
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoscalePause indicates an expected call of AutoscalePause
func (mr *MockClientMockRecorder) AutoscalePause() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscalePause", reflect.TypeOf((*MockClient)(nil).AutoscalePause))
}

// AutoscaleResume mocks base method
func (m *MockClient) AutoscaleResume() error {
	ret := m.ctrl.Call(m, "AutoscaleResume")
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoscaleResume indicates an expected call of AutoscaleResume
func (mr *MockClientMockRecorder) AutoscaleResume() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscaleResume", reflect.TypeOf((*MockClient)(nil).AutoscaleResume))
}

// AutoscaleVersion mocks base method
func (m *MockClient) AutoscaleVersion() (*drone.Version, error) {
	ret := m.ctrl.Call(m, "AutoscaleVersion")
	ret0, _ := ret[0].(*drone.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoscaleVersion indicates an expected call of AutoscaleVersion
func (mr *MockClientMockRecorder) AutoscaleVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscaleVersion", reflect.TypeOf((*MockClient)(nil).AutoscaleVersion))
}

// Build mocks base method
func (m *MockClient) Build(arg0, arg1 string, arg2 int) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockClientMockRecorder) Build(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockClient)(nil).Build), arg0, arg1, arg2)
}

// BuildApprove mocks base method
func (m *MockClient) BuildApprove(arg0, arg1 string, arg2 int) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "BuildApprove", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApprove indicates an expected call of BuildApprove
func (mr *MockClientMockRecorder) BuildApprove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApprove", reflect.TypeOf((*MockClient)(nil).BuildApprove), arg0, arg1, arg2)
}

// BuildDecline mocks base method
func (m *MockClient) BuildDecline(arg0, arg1 string, arg2 int) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "BuildDecline", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDecline indicates an expected call of BuildDecline
func (mr *MockClientMockRecorder) BuildDecline(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDecline", reflect.TypeOf((*MockClient)(nil).BuildDecline), arg0, arg1, arg2)
}

// BuildKill mocks base method
func (m *MockClient) BuildKill(arg0, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "BuildKill", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildKill indicates an expected call of BuildKill
func (mr *MockClientMockRecorder) BuildKill(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildKill", reflect.TypeOf((*MockClient)(nil).BuildKill), arg0, arg1, arg2)
}

// BuildLast mocks base method
func (m *MockClient) BuildLast(arg0, arg1, arg2 string) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "BuildLast", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLast indicates an expected call of BuildLast
func (mr *MockClientMockRecorder) BuildLast(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLast", reflect.TypeOf((*MockClient)(nil).BuildLast), arg0, arg1, arg2)
}

// BuildList mocks base method
func (m *MockClient) BuildList(arg0, arg1 string) ([]*drone.Build, error) {
	ret := m.ctrl.Call(m, "BuildList", arg0, arg1)
	ret0, _ := ret[0].([]*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildList indicates an expected call of BuildList
func (mr *MockClientMockRecorder) BuildList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildList", reflect.TypeOf((*MockClient)(nil).BuildList), arg0, arg1)
}

// BuildQueue mocks base method
func (m *MockClient) BuildQueue() ([]*drone.Activity, error) {
	ret := m.ctrl.Call(m, "BuildQueue")
	ret0, _ := ret[0].([]*drone.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildQueue indicates an expected call of BuildQueue
func (mr *MockClientMockRecorder) BuildQueue() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildQueue", reflect.TypeOf((*MockClient)(nil).BuildQueue))
}

// BuildStart mocks base method
func (m *MockClient) BuildStart(arg0, arg1 string, arg2 int, arg3 map[string]string) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "BuildStart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStart indicates an expected call of BuildStart
func (mr *MockClientMockRecorder) BuildStart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStart", reflect.TypeOf((*MockClient)(nil).BuildStart), arg0, arg1, arg2, arg3)
}

// BuildStop mocks base method
func (m *MockClient) BuildStop(arg0, arg1 string, arg2, arg3 int) error {
	ret := m.ctrl.Call(m, "BuildStop", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildStop indicates an expected call of BuildStop
func (mr *MockClientMockRecorder) BuildStop(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStop", reflect.TypeOf((*MockClient)(nil).BuildStop), arg0, arg1, arg2, arg3)
}

// Deploy mocks base method
func (m *MockClient) Deploy(arg0, arg1 string, arg2 int, arg3 string, arg4 map[string]string) (*drone.Build, error) {
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*drone.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy
func (mr *MockClientMockRecorder) Deploy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockClient)(nil).Deploy), arg0, arg1, arg2, arg3, arg4)
}

// LogsPurge mocks base method
func (m *MockClient) LogsPurge(arg0, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "LogsPurge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogsPurge indicates an expected call of LogsPurge
func (mr *MockClientMockRecorder) LogsPurge(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogsPurge", reflect.TypeOf((*MockClient)(nil).LogsPurge), arg0, arg1, arg2)
}

// Registry mocks base method
func (m *MockClient) Registry(arg0, arg1, arg2 string) (*drone.Registry, error) {
	ret := m.ctrl.Call(m, "Registry", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registry indicates an expected call of Registry
func (mr *MockClientMockRecorder) Registry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockClient)(nil).Registry), arg0, arg1, arg2)
}

// RegistryCreate mocks base method
func (m *MockClient) RegistryCreate(arg0, arg1 string, arg2 *drone.Registry) (*drone.Registry, error) {
	ret := m.ctrl.Call(m, "RegistryCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryCreate indicates an expected call of RegistryCreate
func (mr *MockClientMockRecorder) RegistryCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryCreate", reflect.TypeOf((*MockClient)(nil).RegistryCreate), arg0, arg1, arg2)
}

// RegistryDelete mocks base method
func (m *MockClient) RegistryDelete(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "RegistryDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryDelete indicates an expected call of RegistryDelete
func (mr *MockClientMockRecorder) RegistryDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryDelete", reflect.TypeOf((*MockClient)(nil).RegistryDelete), arg0, arg1, arg2)
}

// RegistryList mocks base method
func (m *MockClient) RegistryList(arg0, arg1 string) ([]*drone.Registry, error) {
	ret := m.ctrl.Call(m, "RegistryList", arg0, arg1)
	ret0, _ := ret[0].([]*drone.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryList indicates an expected call of RegistryList
func (mr *MockClientMockRecorder) RegistryList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryList", reflect.TypeOf((*MockClient)(nil).RegistryList), arg0, arg1)
}

// RegistryUpdate mocks base method
func (m *MockClient) RegistryUpdate(arg0, arg1 string, arg2 *drone.Registry) (*drone.Registry, error) {
	ret := m.ctrl.Call(m, "RegistryUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryUpdate indicates an expected call of RegistryUpdate
func (mr *MockClientMockRecorder) RegistryUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryUpdate", reflect.TypeOf((*MockClient)(nil).RegistryUpdate), arg0, arg1, arg2)
}

// Repo mocks base method
func (m *MockClient) Repo(arg0, arg1 string) (*drone.Repo, error) {
	ret := m.ctrl.Call(m, "Repo", arg0, arg1)
	ret0, _ := ret[0].(*drone.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repo indicates an expected call of Repo
func (mr *MockClientMockRecorder) Repo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repo", reflect.TypeOf((*MockClient)(nil).Repo), arg0, arg1)
}

// RepoChown mocks base method
func (m *MockClient) RepoChown(arg0, arg1 string) (*drone.Repo, error) {
	ret := m.ctrl.Call(m, "RepoChown", arg0, arg1)
	ret0, _ := ret[0].(*drone.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoChown indicates an expected call of RepoChown
func (mr *MockClientMockRecorder) RepoChown(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoChown", reflect.TypeOf((*MockClient)(nil).RepoChown), arg0, arg1)
}

// RepoDel mocks base method
func (m *MockClient) RepoDel(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RepoDel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoDel indicates an expected call of RepoDel
func (mr *MockClientMockRecorder) RepoDel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoDel", reflect.TypeOf((*MockClient)(nil).RepoDel), arg0, arg1)
}

// RepoList mocks base method
func (m *MockClient) RepoList() ([]*drone.Repo, error) {
	ret := m.ctrl.Call(m, "RepoList")
	ret0, _ := ret[0].([]*drone.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoList indicates an expected call of RepoList
func (mr *MockClientMockRecorder) RepoList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoList", reflect.TypeOf((*MockClient)(nil).RepoList))
}

// RepoMove mocks base method
func (m *MockClient) RepoMove(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "RepoMove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoMove indicates an expected call of RepoMove
func (mr *MockClientMockRecorder) RepoMove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoMove", reflect.TypeOf((*MockClient)(nil).RepoMove), arg0, arg1, arg2)
}

// RepoPatch mocks base method
func (m *MockClient) RepoPatch(arg0, arg1 string, arg2 *drone.RepoPatch) (*drone.Repo, error) {
	ret := m.ctrl.Call(m, "RepoPatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoPatch indicates an expected call of RepoPatch
func (mr *MockClientMockRecorder) RepoPatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoPatch", reflect.TypeOf((*MockClient)(nil).RepoPatch), arg0, arg1, arg2)
}

// RepoPost mocks base method
func (m *MockClient) RepoPost(arg0, arg1 string) (*drone.Repo, error) {
	ret := m.ctrl.Call(m, "RepoPost", arg0, arg1)
	ret0, _ := ret[0].(*drone.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoPost indicates an expected call of RepoPost
func (mr *MockClientMockRecorder) RepoPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoPost", reflect.TypeOf((*MockClient)(nil).RepoPost), arg0, arg1)
}

// RepoRepair mocks base method
func (m *MockClient) RepoRepair(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RepoRepair", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoRepair indicates an expected call of RepoRepair
func (mr *MockClientMockRecorder) RepoRepair(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoRepair", reflect.TypeOf((*MockClient)(nil).RepoRepair), arg0, arg1)
}

// Secret mocks base method
func (m *MockClient) Secret(arg0, arg1, arg2 string) (*drone.Secret, error) {
	ret := m.ctrl.Call(m, "Secret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secret indicates an expected call of Secret
func (mr *MockClientMockRecorder) Secret(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockClient)(nil).Secret), arg0, arg1, arg2)
}

// SecretCreate mocks base method
func (m *MockClient) SecretCreate(arg0, arg1 string, arg2 *drone.Secret) (*drone.Secret, error) {
	ret := m.ctrl.Call(m, "SecretCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreate indicates an expected call of SecretCreate
func (mr *MockClientMockRecorder) SecretCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockClient)(nil).SecretCreate), arg0, arg1, arg2)
}

// SecretDelete mocks base method
func (m *MockClient) SecretDelete(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SecretDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretDelete indicates an expected call of SecretDelete
func (mr *MockClientMockRecorder) SecretDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretDelete", reflect.TypeOf((*MockClient)(nil).SecretDelete), arg0, arg1, arg2)
}

// SecretList mocks base method
func (m *MockClient) SecretList(arg0, arg1 string) ([]*drone.Secret, error) {
	ret := m.ctrl.Call(m, "SecretList", arg0, arg1)
	ret0, _ := ret[0].([]*drone.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList
func (mr *MockClientMockRecorder) SecretList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockClient)(nil).SecretList), arg0, arg1)
}

// SecretUpdate mocks base method
func (m *MockClient) SecretUpdate(arg0, arg1 string, arg2 *drone.Secret) (*drone.Secret, error) {
	ret := m.ctrl.Call(m, "SecretUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*drone.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretUpdate indicates an expected call of SecretUpdate
func (mr *MockClientMockRecorder) SecretUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretUpdate", reflect.TypeOf((*MockClient)(nil).SecretUpdate), arg0, arg1, arg2)
}

// Self mocks base method
func (m *MockClient) Self() (*drone.User, error) {
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].(*drone.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Self indicates an expected call of Self
func (mr *MockClientMockRecorder) Self() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*MockClient)(nil).Self))
}

// Server mocks base method
func (m *MockClient) Server(arg0 string) (*drone.Server, error) {
	ret := m.ctrl.Call(m, "Server", arg0)
	ret0, _ := ret[0].(*drone.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Server indicates an expected call of Server
func (mr *MockClientMockRecorder) Server(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockClient)(nil).Server), arg0)
}

// ServerCreate mocks base method
func (m *MockClient) ServerCreate() (*drone.Server, error) {
	ret := m.ctrl.Call(m, "ServerCreate")
	ret0, _ := ret[0].(*drone.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerCreate indicates an expected call of ServerCreate
func (mr *MockClientMockRecorder) ServerCreate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerCreate", reflect.TypeOf((*MockClient)(nil).ServerCreate))
}

// ServerDelete mocks base method
func (m *MockClient) ServerDelete(arg0 string) error {
	ret := m.ctrl.Call(m, "ServerDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerDelete indicates an expected call of ServerDelete
func (mr *MockClientMockRecorder) ServerDelete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerDelete", reflect.TypeOf((*MockClient)(nil).ServerDelete), arg0)
}

// ServerList mocks base method
func (m *MockClient) ServerList() ([]*drone.Server, error) {
	ret := m.ctrl.Call(m, "ServerList")
	ret0, _ := ret[0].([]*drone.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerList indicates an expected call of ServerList
func (mr *MockClientMockRecorder) ServerList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerList", reflect.TypeOf((*MockClient)(nil).ServerList))
}

// SetAddress mocks base method
func (m *MockClient) SetAddress(arg0 string) {
	m.ctrl.Call(m, "SetAddress", arg0)
}

// SetAddress indicates an expected call of SetAddress
func (mr *MockClientMockRecorder) SetAddress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockClient)(nil).SetAddress), arg0)
}

// SetClient mocks base method
func (m *MockClient) SetClient(arg0 *http.Client) {
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient
func (mr *MockClientMockRecorder) SetClient(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockClient)(nil).SetClient), arg0)
}

// User mocks base method
func (m *MockClient) User(arg0 string) (*drone.User, error) {
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(*drone.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockClientMockRecorder) User(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User), arg0)
}

// UserDel mocks base method
func (m *MockClient) UserDel(arg0 string) error {
	ret := m.ctrl.Call(m, "UserDel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDel indicates an expected call of UserDel
func (mr *MockClientMockRecorder) UserDel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDel", reflect.TypeOf((*MockClient)(nil).UserDel), arg0)
}

// UserList mocks base method
func (m *MockClient) UserList() ([]*drone.User, error) {
	ret := m.ctrl.Call(m, "UserList")
	ret0, _ := ret[0].([]*drone.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList
func (mr *MockClientMockRecorder) UserList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockClient)(nil).UserList))
}

// UserPatch mocks base method
func (m *MockClient) UserPatch(arg0 *drone.User) (*drone.User, error) {
	ret := m.ctrl.Call(m, "UserPatch", arg0)
	ret0, _ := ret[0].(*drone.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPatch indicates an expected call of UserPatch
func (mr *MockClientMockRecorder) UserPatch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPatch", reflect.TypeOf((*MockClient)(nil).UserPatch), arg0)
}

// UserPost mocks base method
func (m *MockClient) UserPost(arg0 *drone.User) (*drone.User, error) {
	ret := m.ctrl.Call(m, "UserPost", arg0)
	ret0, _ := ret[0].(*drone.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPost indicates an expected call of UserPost
func (mr *MockClientMockRecorder) UserPost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPost", reflect.TypeOf((*MockClient)(nil).UserPost), arg0)
}
